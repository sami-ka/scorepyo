[build-system]
requires = [
  "setuptools >= 45",
  "setuptools_scm[toml]>=6.2",
  "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
root = ".."
local_scheme = "no-local-version"

[tool.black]
line-length = 88
target-version = ['py39', 'py38']
#include = '\.pyi?$'

[tool.isort]
# make it compatible with black
profile = "black" 
known_first_party=["scorepyo"]


[tool.bandit]
assert_used.skips= ["*/test_*.py", "*/test_*.py"]
exclude_dirs= ["**codepal.py"]

[tool.mypy]
ignore_missing_imports = "True"
namespace_packages = "True"
exclude = ["core_module/build/"]
no_implicit_optional = "False"



[tool.pylint.MASTER]
# Specify a score threshold to be exceeded before program exits with error.
fail-under=10.0

# Files or directories to be skipped. They should be base names, not paths.
ignore=["CVS", "benchmark.py"]

# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths. The default value ignores emacs file
# locks
#ignore-patterns="^\."

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# Pickle collected data for later comparisons.
persistent="yes"

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version="3.8"

# Discover python modules and packages in the file system subtree.
recursive="yes"

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode="yes"

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension="no"

[tool.pylint.messages_control]
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable="all"

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=["c-extension-no-member",
       "dangerous-default-value",
       "duplicate-argument-name",
       "expression-not-assigned",
       "function-redefined",
       "undefined-variable",
       "unexpected-keyword-arg",
       "unused-argument",
       "unused-import",
       "unused-variable"]
# use this section to continuously add new errors to be detected
# see https://pylint.pycqa.org/en/latest/technical_reference/features.html
# for a list of options
# see https://pythonspeed.com/articles/pylint/ for some explanations
# see https://github.com/openedx/edx-lint/blob/master/pylintrc for a 
# complet e/ mature example

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each
# category, as well as 'statement' which is the total number of statements
# analyzed. This score is used by the global evaluation report (RP0004).
evaluation="max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format="text"

# Tells whether to display a full report or only the messages.
reports="no"

# Activate the evaluation score.
score="yes"

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=["sys.exit","argparse.parse_error"]

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style="snake_case"

# Naming style matching correct attribute names.
attr-naming-style="snake_case"

# Naming style matching correct class attribute names.
class-attribute-naming-style="any"

# Naming style matching correct class constant names.
class-const-naming-style="UPPER_CASE"

# Naming style matching correct class names.
class-naming-style="PascalCase"

# Naming style matching correct constant names.
const-naming-style="UPPER_CASE"

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style="snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names=["i",
           "j",
           "k",
           "ex",
           "Run",
           "_"
           ]

# Include a hint for the correct naming format with invalid-name.
include-naming-hint="no"

# Naming style matching correct inline iteration names.
inlinevar-naming-style="any"

# Naming style matching correct method names.
method-naming-style="snake_case"

# Naming style matching correct module names.
module-naming-style="snake_case"

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx="^_"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes="abc.abstractproperty"


# Naming style matching correct variable names.
variable-naming-style="snake_case"

[tool.pylint.format]
# Regexp for a line that is allowed to be longer than the limit.
#ignore-long-lines="^\s*(# )?<?https?://\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module.
max-module-lines=1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt="no"

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt="no"

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style="old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules="logging"

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes=["FIXME",
      "XXX",
      "TODO"]

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments="yes"

# Docstrings are removed from the similarity computation
ignore-docstrings="yes"

# Imports are removed from the similarity computation
ignore-imports="no"

# Signatures are removed from the similarity computation
ignore-signatures="no"

# Minimum lines number of a similarity.
min-similarity-lines=4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# List of comma separated words that should be considered directives if they
# appear and the beginning of a comment and should not be checked.
spelling-ignore-comment-directives=["fmt: on","fmt: off","noqa:","noqa","nosec","isort:skip","mypy:"]

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words="no"


[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency="no"

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps="no"

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators="contextlib.contextmanager"

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
ignore-mixin-members="yes"

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none="yes"

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference="yes"

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=["optparse.Values","thread._local","_thread._local"]

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint="yes"

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins ignore-mixin-
# members is set to 'yes'
mixin-class-rgx=".*[Mm]ixin"

[tool.pylint.variables]
# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables="yes"

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=["cb_",
          "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names="_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
init-import="no"

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=["six.moves","past.builtins","future.builtins","builtins","io"]



[tool.pylint.classes]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods="no"

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=["__init__",
                      "__new__",
                      "setUp",
                      "__post_init__"
                      ]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=["_asdict",
                  "_fields",
                  "_replace",
                  "_source",
                  "_make"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg="cls"

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg="cls"


[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[tool.pylint.imports]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all="no"

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks="no"

# Force import order to recognize a module as part of a third party library.
known-third-party="enchant"

[tool.pylint.exceptions]
# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions=["BaseException",
                       "Exception"]
